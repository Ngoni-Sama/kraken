from os import system as ss
import argparse
from subprocess import Popen, PIPE, STDOUT
import time

# in .gammurc
# ; Configuration file generated by gammu-detect.
# ; Please check The Gammu Manual for more information.
#
# [gammu]
# device = /dev/ttyUSB0
# name = Phone on USB serial port HUAWEI_Technology HUAWEI_Mobile
# connection = at
#
# [gammu1]
# device = /dev/ttyUSB1
# name = Phone on USB serial port HUAWEI_Technology HUAWEI_Mobile
# connection = at
#
# [gammu2]
# device = /dev/ttyUSB2
# name = Phone on USB serial port HUAWEI_Technology HUAWEI_Mobile
# connection = at
#
# [gammu3]
# device = /dev/ttyS0
# name = Phone on serial port 0
# connection = at
#
# [gammu4]
# device = /dev/ttyS2
# name = Phone on serial port 2
# connection = at
#
# [gammu5]
# device = /dev/ttyS3
# name = Phone on serial port 3
# connection = at


def send_ussd(code):
    """

    Args:
        code:

    Returns:

    """
    print("[+] Executing USSD code ::{}::".format(code))
    ss('echo "' + code.replace("'", "") + '" | sudo gammu -c ~/.gammurc getussd "' + code + '" > outt.txt')

    with open("outt.txt", "r") as fout:
        response = fout.read()
        print("[+] response:", response)
        if "busy or no permissions" in response:
            return False
        else:
            return True


def try_send_ussd(code, delay=3, limit_trying=5):
    """

    Args:
        code:
        delay:
        limit_trying:

    Returns:

    """
    r = send_ussd(code)
    count_trying = 1
    while not r:
        print("[+] Failed to get response from ussd Code, retrying...")
        time.sleep(delay)
        r = send_ussd(code)
        if count_trying >= limit_trying:
            print("[+] Tried count exceed, the device has a problem or is not well connected !")
            break


if __name__ == '__main__':
    # Initialize the arguments
    # Example test : python ussd.py -c #123#
    prs = argparse.ArgumentParser()
    prs.add_argument('-c', '--code', help='The complete USSD code', type=str, required=True)
    prs.add_argument('-i', '--iteration', help='The number of time you want to send this message', type=int, default=1)
    prs = prs.parse_args()

    for i in range(prs.iteration):
        try_send_ussd(prs.code)
